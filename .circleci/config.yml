---
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3
  ansible: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@1.8.0

executors:
  python:
    docker:
      - image: circleci/python

jobs:
  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Deploy CloudFormation
          command: |
            set -x
            aws cloudformation deploy --stack-name lecture14-VPC --template-file cloudformation/CFn-VPC.yml
            aws cloudformation deploy --stack-name lecture14-EC2 --template-file cloudformation/CFn-EC2.yml
            aws cloudformation deploy --stack-name lecture14-RDS --template-file cloudformation/CFn-RDS.yml
            aws cloudformation deploy --stack-name lecture14-ELB --template-file cloudformation/CFn-ELB.yml
            aws cloudformation deploy --stack-name lecture14-S3 --template-file cloudformation/CFn-S3.yml

  execute-ansible:
    executor: python
    parameters:
      version:
        description: |
          Ansible version
        type: string
        default: ''
      inventory:
        description: |
          Ansible inventory file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_INVENTORY
      playbook:
        description: |
          The path of Ansible playbook
        type: string
      playbook-options:
        description: |
          Ansible-playbook command options
        type: string
        default: ''
      private-key:
        description: |
          SSH private key file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_SSH_KEY
    steps:
      - checkout
      - ansible/install:
          version: <<parameters.version>>
      - ansible/playbook:
          inventory: <<parameters.inventory>>
          playbook: <<parameters.playbook>>
          playbook-options: <<parameters.playbook-options>>
          private-key: <<parameters.private-key>>

  execute-serverspec:
    docker:
      - image: 'cimg/ruby:2.7'
    steps:
      - checkout
      - run:
          name: Set Environmental Variables
          command: |
            echo "export ec2_server=$HOST_NAME" >> $BASH_ENV
            echo "export ec2_user=$USER_NAME" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Environment Setup & Execute Test
          command: |
            gem install bundler
            gem install serverspec
            gem install rake
            gem install ed25519 -v '1.2'
            gem install bcrypt_pbkdf -v '1.0'
            rake spec

workflows:
  raisetech:
    jobs:
      - execute-cloudformation
      - execute-ansible:
          inventory: ANSIBLE_INVENTORY
          playbook: ansible/playbook.yml
          playbook-options: '-vvv'
          private-key: ANSIBLE_SSH_KEY
          requires:
            - "execute-cloudformation"
      - execute-serverspec:
          requires:
            - "execute-ansible"