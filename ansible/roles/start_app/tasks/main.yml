---
- name: Install Rails dependencies packages
  yum:
    name:
      - libxml2-devel
      - ImageMagick
      - ImageMagick-devel
    state: present

- name: Register Environmental Variables
  become: yes
  # command: 
    # cmd: ssh -oStrictHostKeyChecking=no -t "{{ lookup('env', 'ec2_host_name') }}" -i "{{ lookup('env', 'ansible_ssh_key') }}" \
    #        '"{{ lookup('env', 'db_user_name') }}"=$(printf %q "$RAISETECH_LIVE8_SAMPLE_APP_DATABASE_USERNAME") \
    #         "{{ lookup('env', 'db_password') }}"=$(printf %q "$RAISETECH_LIVE8_SAMPLE_APP_DATABASE_PASSWORD") \
    #         "{{ lookup('env', 'db_endpoint') }}"=$(printf %q "$RAISETECH_LIVE8_SAMPLE_APP_DATABASE_HOST") \
    #         bash'
  shell: 
    cmd: |
      bash -lc "echo RAISETECH_LIVE8_SAMPLE_APP_DATABASE_USERNAME={{ lookup('env', 'db_user_name') }} > /etc/environment"
      bash -lc "echo RAISETECH_LIVE8_SAMPLE_APP_DATABASE_PASSWORD={{ lookup('env', 'db_password') }} >> /etc/environment"
      bash -lc "echo RAISETECH_LIVE8_SAMPLE_APP_DATABASE_HOST={{ lookup('env', 'db_endpoint') }} >> /etc/environment"

- name: Change directory and bundle install(Skip installation of development and test environments)
  become: yes
  command:
    cmd: bash -lc "bundle install --without development test"
    chdir: "/var/www/{{ app_name }}"

- name: Check if masterkey exists
  stat:
    path: "/var/www/{{ app_name }}/config/master.key"
  register: masterkey_stat

- name: Set master.key
  block: 
    - name: Touch master.key
      file:
        path: "/var/www/{{ app_name }}/config/master.key"
        state: touch
    - name: Edit master.key
      vars:
        master_key: "{{ lookup('env', 'rails_master_key') }}"
      lineinfile:
        path: "/var/www/{{ app_name }}/config/master.key"
        insertafter: EOF
        line: "{{ master_key }}"
  when: not masterkey_stat.stat.exists

# expectモジュールをwebpackerのインストール時に使用できるようにするため必要
- name: Install pexpect
  become: yes
  pip:
    name: pexpect
    executable: pip3.7

- name: Install webpacker
  become: yes
  expect:
    command: bash -lc "bundle exec rails webpacker:install RAILS_ENV{{'='}}production"
    chdir: "/var/www/{{ app_name }}"
    responses:
      (.*)Overwrite (.*): "n"
    timeout: 180

- name: Precompile the Rails application
  become: yes
  command:
    cmd: bash -lc "bundle exec rails assets:precompile"
    chdir: "/var/www/{{ app_name }}"    
  environment:
    RAILS_ENV: production

- name: Start nginxd
  become: yes
  shell: bash -lc "systemctl start nginx.service"  

# # これがないとCreate databaseでエラーになる
# - name: Skip installation of development and test environments
#   become: yes
#   command:
#     cmd: bash -lc "bundle install --without development test"
#     chdir: "/var/www/{{ app_name }}" 

- name: Set database
  block:
  - name: Create database
    command:
      cmd: bash -lc "bundle exec rails db:create"
      chdir: "/var/www/{{ app_name }}"
    environment:
      RAILS_ENV: production
  - name: Migrate database
    command:
      cmd: bash -lc "bundle exec rails db:migrate"
      chdir: "/var/www/{{ app_name }}"
    environment:
      RAILS_ENV: production

- name: Create config/unicorn.rb
  template:
    src: roles/start_app/templates/unicorn.rb.j2
    dest: "/var/www/{{ app_name }}/config/unicorn.rb"
    owner: ec2-user
    group: ec2-user

# - name: Check unicorn status
- name: Check APP server startup
  uri:
    url: http://"{{ lookup('env', 'ec2_host_name') }}"
  register: status_code

- name: test unicorn
  debug:
    msg: "{{ status_code }}"


- name: Start unicorn
  command:
    cmd: bash -lc "bundle exec unicorn_rails -c '/var/www/{{ app_name }}/config/unicorn.rb' -D -E production"
    chdir: "/var/www/{{ app_name }}"
  when: not status_code==200